{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": "-- Grafana --",
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "gnetId": null,
  "graphTooltip": 0,
  "id": 9,
  "iteration": 1655724386592,
  "links": [],
  "panels": [
    {
      "datasource": "-- Dashboard --",
      "gridPos": {
        "h": 2,
        "w": 2,
        "x": 0,
        "y": 0
      },
      "id": 14,
      "options": {},
      "targets": [
        {
          "panelId": 12,
          "refId": "A"
        }
      ],
      "textTemplate": "⮌ Home",
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "transparent": true,
      "type": "grafana-singlevalue-panel",
      "urlTemplate": "/d/home/home?orgId=1&var-dataset=${dataset}&var-origin=${__cell_0}&var-build_architecture=${__cell_1}&var-build_config_name=${__cell_2}",
      "valueFontSize": "50%"
    },
    {
      "datasource": "-- Dashboard --",
      "gridPos": {
        "h": 2,
        "w": 3,
        "x": 2,
        "y": 0
      },
      "id": 18,
      "options": {},
      "targets": [
        {
          "panelId": 12,
          "refId": "A"
        }
      ],
      "textTemplate": "⮌ Repository",
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "transparent": true,
      "type": "grafana-singlevalue-panel",
      "urlTemplate": "/d/repository/repository?orgId=1&var-dataset=${dataset}&var-origin=${__cell_0}&var-build_architecture=${__cell_1}&var-build_config_name=${__cell_2}&var-git_repository_url=${__cell_4}",
      "valueFontSize": "50%"
    },
    {
      "datasource": "-- Grafana --",
      "gridPos": {
        "h": 2,
        "w": 19,
        "x": 5,
        "y": 0
      },
      "id": 16,
      "options": {},
      "textTemplate": "",
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "transparent": true,
      "type": "grafana-singlevalue-panel",
      "urlTemplate": "",
      "valueFontSize": "50%"
    },
    {
      "cacheTimeout": null,
      "colorBackground": false,
      "colorValue": false,
      "colors": [
        "#299c46",
        "rgba(237, 129, 40, 0.89)",
        "#d44a3a"
      ],
      "datasource": "Google BigQuery",
      "format": "none",
      "gauge": {
        "maxValue": 100,
        "minValue": 0,
        "show": false,
        "thresholdLabels": false,
        "thresholdMarkers": true
      },
      "gridPos": {
        "h": 2,
        "w": 8,
        "x": 0,
        "y": 2
      },
      "id": 12,
      "interval": null,
      "links": [],
      "mappingType": 1,
      "mappingTypes": [
        {
          "name": "value to text",
          "value": 1
        },
        {
          "name": "range to text",
          "value": 2
        }
      ],
      "maxDataPoints": 100,
      "nullPointMode": "connected",
      "nullText": null,
      "options": {},
      "postfix": "",
      "postfixFontSize": "50%",
      "prefix": "",
      "prefixFontSize": "50%",
      "rangeMaps": [
        {
          "from": "null",
          "text": "N/A",
          "to": "null"
        }
      ],
      "sparkline": {
        "fillColor": "rgba(31, 118, 189, 0.18)",
        "full": false,
        "lineColor": "rgb(31, 120, 193)",
        "show": false,
        "ymax": null,
        "ymin": null
      },
      "tableColumn": "origins",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "orderByCol": "1",
          "orderBySort": "1",
          "rawQuery": true,
          "rawSql": "SELECT\n    IF(${origin} = \"%\", \"All\", ${origin}) AS origin_param,\n    IF(${build_architecture} = \"%\", \"All\", ${build_architecture}) AS build_architecture_param,\n    IF(${build_config_name} = \"%\", \"All\", ${build_config_name}) AS build_config_name_param,\n    STRING_AGG(DISTINCT origin, \", \" ORDER BY origin ASC) AS origins,\n    ${git_repository_url:json} AS git_repository_url,\n    ${git_repository_branch:json} AS git_repository_branch\nFROM ${dataset}.checkouts\nWHERE\n    start_time BETWEEN TIMESTAMP_MILLIS($__from) AND TIMESTAMP_MILLIS($__to) AND\n    git_repository_url=${git_repository_url:json} AND\n    git_repository_branch=${git_repository_branch:json} AND\n    origin LIKE ${origin}",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "-- value --"
                ],
                "type": "column"
              }
            ]
          ],
          "timeColumn": "-- time --",
          "timeColumnType": "TIMESTAMP",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "thresholds": "",
      "timeFrom": null,
      "timeShift": null,
      "title": "Origins",
      "type": "singlestat",
      "valueFontSize": "50%",
      "valueMaps": [
        {
          "op": "=",
          "text": "",
          "value": "null"
        }
      ],
      "valueName": "first"
    },
    {
      "cacheTimeout": null,
      "datasource": "-- Dashboard --",
      "gridPos": {
        "h": 2,
        "w": 11,
        "x": 8,
        "y": 2
      },
      "id": 2,
      "links": [],
      "options": {},
      "targets": [
        {
          "panelId": 12,
          "refId": "A"
        }
      ],
      "textTemplate": "${__cell_4}",
      "timeFrom": null,
      "timeShift": null,
      "title": "Repository URL",
      "type": "grafana-singlevalue-panel",
      "urlTemplate": "/d/repository/repository?orgId=1&var-dataset=${dataset}&var-origin=${__cell_0}&var-build_architecture=${__cell_1}&var-build_config_name=${__cell_2}&var-git_repository_url=${__cell_4}",
      "valueFontSize": "50%"
    },
    {
      "cacheTimeout": null,
      "colorBackground": false,
      "colorValue": false,
      "colors": [
        "#299c46",
        "rgba(237, 129, 40, 0.89)",
        "#d44a3a"
      ],
      "datasource": "-- Dashboard --",
      "format": "none",
      "gauge": {
        "maxValue": 100,
        "minValue": 0,
        "show": false,
        "thresholdLabels": false,
        "thresholdMarkers": true
      },
      "gridPos": {
        "h": 2,
        "w": 5,
        "x": 19,
        "y": 2
      },
      "id": 17,
      "interval": null,
      "links": [],
      "mappingType": 1,
      "mappingTypes": [
        {
          "name": "value to text",
          "value": 1
        },
        {
          "name": "range to text",
          "value": 2
        }
      ],
      "maxDataPoints": 100,
      "nullPointMode": "connected",
      "nullText": null,
      "options": {},
      "postfix": "",
      "postfixFontSize": "50%",
      "prefix": "",
      "prefixFontSize": "50%",
      "rangeMaps": [
        {
          "from": "null",
          "text": "N/A",
          "to": "null"
        }
      ],
      "sparkline": {
        "fillColor": "rgba(31, 118, 189, 0.18)",
        "full": false,
        "lineColor": "rgb(31, 120, 193)",
        "show": false,
        "ymax": null,
        "ymin": null
      },
      "tableColumn": "git_repository_branch",
      "targets": [
        {
          "panelId": 12,
          "refId": "A"
        }
      ],
      "thresholds": "",
      "timeFrom": null,
      "timeShift": null,
      "title": "Name",
      "type": "singlestat",
      "valueFontSize": "50%",
      "valueMaps": [
        {
          "op": "=",
          "text": "N/A",
          "value": "null"
        }
      ],
      "valueName": "first"
    },
    {
      "columns": [],
      "datasource": null,
      "fontSize": "100%",
      "gridPos": {
        "h": 16,
        "w": 24,
        "x": 0,
        "y": 4
      },
      "id": 30,
      "maxDataPoints": "250",
      "options": {},
      "pageSize": 6,
      "showHeader": true,
      "sort": {
        "col": null,
        "desc": false
      },
      "styles": [
        {
          "alias": "Checkouts ​ ​ ​",
          "align": "left",
          "colorMode": "cell",
          "colors": [
            "rgba(242, 73, 92, 0)",
            "#37872D",
            "#C4162A"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "link": true,
          "linkTooltip": "View revision",
          "linkUrl": "/d/revision/revision?orgId=1&var-dataset=${dataset}&var-origin=${__cell_0}&var-build_architecture=${__cell_1}&var-build_config_name=${__cell_2}&var-git_commit_hash=${__cell_3}&var-patchset_hash=${__cell_4}",
          "mappingType": 1,
          "pattern": "checkouts_valid_num",
          "thresholds": [
            "0",
            "1"
          ],
          "type": "string",
          "unit": "short",
          "valueMaps": [
            {
              "text": "✗",
              "value": "1"
            },
            {
              "text": "✔️",
              "value": "0"
            },
            {
              "text": "",
              "value": "-1"
            }
          ]
        },
        {
          "alias": "",
          "align": "auto",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "mappingType": 1,
          "pattern": "git_commit_hash",
          "thresholds": [],
          "type": "hidden",
          "unit": "short"
        },
        {
          "alias": "Repositories",
          "align": "auto",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "link": false,
          "linkTooltip": "View revision",
          "linkUrl": "/d/revision/revision?orgId=1&var-dataset=${dataset}&var-id=${__cell_0}",
          "mappingType": 1,
          "pattern": "git_repository_urls_text",
          "preserveFormat": true,
          "sanitize": false,
          "thresholds": [],
          "type": "string",
          "unit": "short"
        },
        {
          "alias": "Branches",
          "align": "auto",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "link": false,
          "linkTooltip": "View revision",
          "linkUrl": "/d/revision/revision?orgId=1&var-dataset=${dataset}&var-id=${__cell_0}",
          "mappingType": 1,
          "pattern": "git_repository_branches_text",
          "preserveFormat": true,
          "sanitize": false,
          "thresholds": [],
          "type": "string",
          "unit": "short"
        },
        {
          "alias": "Commit names",
          "align": "auto",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "link": false,
          "linkTooltip": "View revision",
          "linkUrl": "/d/revision/revision?orgId=1&var-dataset=${dataset}&var-id=${__cell_0}",
          "mappingType": 1,
          "pattern": "git_commit_names_text",
          "preserveFormat": true,
          "sanitize": false,
          "thresholds": [],
          "type": "string",
          "unit": "short"
        },
        {
          "alias": "Commit hash",
          "align": "auto",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "link": true,
          "linkTooltip": "View revision",
          "linkUrl": "/d/revision/revision?orgId=1&var-dataset=${dataset}&var-origin=${__cell_0}&var-build_architecture=${__cell_1}&var-build_config_name=${__cell_2}&var-git_commit_hash=${__cell_3}&var-patchset_hash=${__cell_4}",
          "mappingType": 1,
          "pattern": "git_commit_hash_short",
          "thresholds": [],
          "type": "string",
          "unit": "short"
        },
        {
          "alias": "First checkout",
          "align": "auto",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "link": true,
          "linkTooltip": "View revision",
          "linkUrl": "/d/revision/revision?orgId=1&var-dataset=${dataset}&var-origin=${__cell_0}&var-build_architecture=${__cell_1}&var-build_config_name=${__cell_2}&var-git_commit_hash=${__cell_3}&var-patchset_hash=${__cell_4}",
          "mappingType": 1,
          "pattern": "checkouts_start_time_str",
          "thresholds": [],
          "type": "string",
          "unit": "short"
        },
        {
          "alias": "Builds​ ​ ​ ​",
          "align": "left",
          "colorMode": "cell",
          "colors": [
            "rgba(245, 54, 54, 0)",
            "#37872D",
            "#C4162A"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "link": true,
          "linkTooltip": "View revision",
          "linkUrl": "/d/revision/revision?orgId=1&var-dataset=${dataset}&var-origin=${__cell_0}&var-build_architecture=${__cell_1}&var-build_config_name=${__cell_2}&var-git_commit_hash=${__cell_3}&var-patchset_hash=${__cell_4}",
          "mappingType": 1,
          "pattern": "builds_valid_num",
          "thresholds": [
            "0",
            "1"
          ],
          "type": "string",
          "unit": "short",
          "valueMaps": [
            {
              "text": "",
              "value": "-1"
            },
            {
              "text": "✔️",
              "value": "0"
            },
            {
              "text": "✗",
              "value": "1"
            }
          ]
        },
        {
          "alias": "Tests​ ​ ​ ​",
          "align": "auto",
          "colorMode": "cell",
          "colors": [
            "rgba(55, 135, 45, 0)",
            "#37872D",
            "#C4162A"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "link": true,
          "linkTooltip": "View revision",
          "linkUrl": "/d/revision/revision?orgId=1&var-dataset=${dataset}&var-origin=${__cell_0}&var-build_architecture=${__cell_1}&var-build_config_name=${__cell_2}&var-git_commit_hash=${__cell_3}&var-patchset_hash=${__cell_4}",
          "mappingType": 1,
          "pattern": "tests_status_num",
          "thresholds": [
            "3",
            "4"
          ],
          "type": "string",
          "unit": "short",
          "valueMaps": [
            {
              "text": "ERROR",
              "value": "5"
            },
            {
              "text": "FAIL",
              "value": "4"
            },
            {
              "text": "PASS",
              "value": "3"
            },
            {
              "text": "DONE",
              "value": "2"
            },
            {
              "text": "SKIP",
              "value": "1"
            },
            {
              "text": "",
              "value": "0"
            },
            {
              "text": "🚧 ERROR",
              "value": "-1"
            },
            {
              "text": "🚧 FAIL",
              "value": "-2"
            },
            {
              "text": "🚧 PASS",
              "value": "-3"
            },
            {
              "text": "🚧 DONE",
              "value": "-4"
            },
            {
              "text": "🚧 SKIP",
              "value": "-5"
            },
            {
              "text": "",
              "value": "-6"
            },
            {
              "text": "❓ ERROR",
              "value": "-7"
            },
            {
              "text": "❓ FAIL",
              "value": "-8"
            },
            {
              "text": "❓ PASS",
              "value": "-9"
            },
            {
              "text": "❓ DONE",
              "value": "-10"
            },
            {
              "text": "❓ SKIP",
              "value": "-11"
            },
            {
              "text": "",
              "value": "-12"
            }
          ]
        },
        {
          "alias": "",
          "align": "auto",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "mappingType": 1,
          "pattern": "patchset_hash",
          "thresholds": [],
          "type": "hidden",
          "unit": "short"
        },
        {
          "alias": "Patchset hash",
          "align": "auto",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "link": true,
          "linkTooltip": "View revision",
          "linkUrl": "/d/revision/revision?orgId=1&var-dataset=${dataset}&var-origin=${__cell_0}&var-build_architecture=${__cell_1}&var-build_config_name=${__cell_2}&var-git_commit_hash=${__cell_3}&var-patchset_hash=${__cell_4}",
          "mappingType": 1,
          "pattern": "patchset_hash_short",
          "thresholds": [],
          "type": "string",
          "unit": "short"
        },
        {
          "alias": "Origins",
          "align": "auto",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "link": true,
          "linkTooltip": "View revision",
          "linkUrl": "/d/revision/revision?orgId=1&var-dataset=${dataset}&var-origin=${__cell_0}&var-build_architecture=${__cell_1}&var-build_config_name=${__cell_2}&var-git_commit_hash=${__cell_3}&var-patchset_hash=${__cell_4}",
          "mappingType": 1,
          "pattern": "origins_str",
          "thresholds": [],
          "type": "string",
          "unit": "short"
        },
        {
          "alias": "",
          "align": "auto",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "mappingType": 1,
          "pattern": "/.*_param/",
          "thresholds": [],
          "type": "hidden",
          "unit": "short"
        },
        {
          "alias": "",
          "align": "left",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "link": true,
          "linkTooltip": "View revision",
          "linkUrl": "/d/revision/revision?orgId=1&var-dataset=${dataset}&var-origin=${__cell_0}&var-build_architecture=${__cell_1}&var-build_config_name=${__cell_2}&var-git_commit_hash=${__cell_3}&var-patchset_hash=${__cell_4}",
          "mappingType": 1,
          "pattern": "/.*/",
          "thresholds": [],
          "type": "string",
          "unit": "short"
        }
      ],
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "orderByCol": "1",
          "orderBySort": "1",
          "rawQuery": true,
          "rawSql": "/*\n * Truncate a string with an ellipsis at speсified length.\n */\nCREATE TEMP FUNCTION TRUNCATE(str STRING, len INT64)\n    RETURNS STRING\n    AS (IF(len = 0 OR CHAR_LENGTH(str) <= len,\n           str,\n           CONCAT(SUBSTR(str, 1, len - 1), \"…\")\n       ));\n\n/*\n * Replace NULL or empty string with a non-breaking space,\n * truncate anything else with ellipsis, if necessary.\n */\nCREATE TEMP FUNCTION BLANK_OR_TRUNCATE(str STRING, len INT64)\n    RETURNS STRING\n    AS (IF(str IS NULL OR str = \"\", \" \", TRUNCATE(str, len)));\n\n/*\n * Format an array of strings as a three-line text with ellipsis\n */\nCREATE TEMP FUNCTION ARRAY_TO_TEXT(strs ARRAY<STRING>, width INT64)\n    RETURNS STRING\n    AS (ARRAY_TO_STRING(\n        [\n            BLANK_OR_TRUNCATE(strs[SAFE_OFFSET(0)], width),\n            BLANK_OR_TRUNCATE(strs[SAFE_OFFSET(1)], width),\n            IF(ARRAY_LENGTH(strs) > 3, \"…\",\n               BLANK_OR_TRUNCATE(strs[SAFE_OFFSET(2)], width))\n        ],\n        \"\\n\"\n    ));\n\nWITH\n    prefiltered_checkouts AS (\n        SELECT\n            *\n        FROM\n            ${dataset}.checkouts\n        WHERE\n            IFNULL(checkouts.start_time BETWEEN TIMESTAMP_MILLIS($__from) AND TIMESTAMP_MILLIS($__to), TRUE) AND\n            origin LIKE ${origin}\n    ),\n    filtered_checkouts AS (\n        SELECT\n            checkouts.*\n        FROM\n            prefiltered_checkouts AS checkouts,\n            prefiltered_checkouts AS other_checkouts\n        WHERE\n            other_checkouts.git_repository_url = ${git_repository_url:json} AND\n            other_checkouts.git_repository_branch = ${git_repository_branch:json} AND\n            checkouts.git_commit_hash = other_checkouts.git_commit_hash AND\n            checkouts.patchset_hash = other_checkouts.patchset_hash\n    ),\n    revision_sources AS (\n        SELECT\n            git_commit_hash,\n            patchset_hash,\n            ARRAY_TO_TEXT(\n                ARRAY_AGG(git_repository_url_str\n                          ORDER BY rank DESC, git_repository_url_str,\n                                   git_repository_branch_str, git_commit_name_str),\n                128\n            ) AS git_repository_urls_text,\n            ARRAY_TO_TEXT(\n                ARRAY_AGG(git_repository_branch_str\n                          ORDER BY rank DESC, git_repository_url_str,\n                                   git_repository_branch_str, git_commit_name_str),\n                32\n            ) AS git_repository_branches_text,\n            ARRAY_TO_TEXT(\n                ARRAY_AGG(git_commit_name_str\n                          ORDER BY rank DESC, git_repository_url_str,\n                                   git_repository_branch_str, git_commit_name_str),\n                32\n            ) AS git_commit_names_text,\n        FROM (\n            SELECT\n                git_commit_hash,\n                patchset_hash,\n                git_repository_url_str,\n                git_repository_branch_str,\n                git_commit_name_str,\n                IF(git_repository_url_str = \"\", 0, 4) +\n                    IF(git_repository_branch_str = \"\", 0, 2) +\n                    IF(git_commit_name_str = \"\", 0, 1) AS rank\n            FROM (\n                SELECT DISTINCT\n                    git_commit_hash,\n                    patchset_hash,\n                    IFNULL(git_repository_url, \"\") AS git_repository_url_str,\n                    IFNULL(git_repository_branch, \"\") AS git_repository_branch_str,\n                    IFNULL(git_commit_name, \"\") AS git_commit_name_str,\n                FROM\n                    filtered_checkouts\n            )\n        )\n        GROUP BY\n            git_commit_hash,\n            patchset_hash\n    )\n/* Massage and join with sources */\nSELECT\n    IF(${origin} = \"%\", \"All\", ${origin}) AS origin_param,\n    IF(${build_architecture} = \"%\", \"All\", ${build_architecture}) AS build_architecture_param,\n    IF(${build_config_name} = \"%\", \"All\", ${build_config_name}) AS build_config_name_param,\n    revisions.git_commit_hash,\n    revisions.patchset_hash,\n    origins_str,\n    SUBSTR(revisions.git_commit_hash, 0, 12) AS git_commit_hash_short,\n    revision_sources.git_repository_urls_text,\n    revision_sources.git_repository_branches_text,\n    revision_sources.git_commit_names_text,\n    SUBSTR(revisions.patchset_hash, 0, 12) AS patchset_hash_short,\n    IFNULL(CAST(checkouts_start_time AS STRING), \"\") AS checkouts_start_time_str,\n    checkouts_valid_num,\n    builds_valid_num,\n    tests_status_num\nFROM (\n    /* Calculate revision statuses */\n    SELECT\n        checkouts.git_commit_hash,\n        checkouts.patchset_hash,\n        STRING_AGG(DISTINCT checkouts.origin, \", \") AS origins_str,\n        MIN(checkouts.start_time) AS checkouts_start_time,\n        MAX(CASE checkouts.valid WHEN false THEN 1 WHEN true THEN 0 ELSE -1 END) AS checkouts_valid_num,\n        MAX(CASE builds.valid WHEN false THEN 1 WHEN true THEN 0 ELSE -1 END) AS builds_valid_num,\n        MAX((CASE tests.status WHEN \"ERROR\" THEN 5 WHEN \"FAIL\" THEN 4 WHEN \"PASS\" THEN 3 WHEN \"DONE\" THEN 2 WHEN \"SKIP\" THEN 1 ELSE 0 END) -\n            (CASE tests.waived WHEN false THEN 0 WHEN true THEN 1 ELSE 2 END) * 6) AS tests_status_num\n    FROM\n        filtered_checkouts AS checkouts\n    LEFT OUTER JOIN\n        ${dataset}.builds AS builds\n        ON\n            builds.checkout_id = checkouts.id AND\n            IFNULL(builds.architecture LIKE ${build_architecture}, TRUE) AND\n            IFNULL(builds.config_name LIKE ${build_config_name}, TRUE)\n    LEFT OUTER JOIN\n        ${dataset}.tests AS tests\n        ON\n            tests.build_id = builds.id\n    GROUP BY\n        checkouts.git_commit_hash,\n        checkouts.patchset_hash\n) AS revisions\nINNER JOIN\n    revision_sources\n    ON\n        revision_sources.git_commit_hash = revisions.git_commit_hash AND\n        revision_sources.patchset_hash = revisions.patchset_hash\nORDER BY\n    checkouts_start_time DESC",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "-- value --"
                ],
                "type": "column"
              }
            ]
          ],
          "timeColumn": "-- time --",
          "timeColumnType": "TIMESTAMP",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "Revisions",
      "transform": "table",
      "type": "table"
    },
    {
      "aliasColors": {
        "FAIL": "semi-dark-red",
        "PASS": "semi-dark-green"
      },
      "bars": false,
      "dashLength": 10,
      "dashes": false,
      "datasource": null,
      "fill": 7,
      "fillGradient": 0,
      "gridPos": {
        "h": 7,
        "w": 12,
        "x": 0,
        "y": 20
      },
      "hiddenSeries": false,
      "id": 20,
      "legend": {
        "avg": false,
        "current": false,
        "max": false,
        "min": false,
        "show": true,
        "total": false,
        "values": false
      },
      "lines": true,
      "linewidth": 0,
      "nullPointMode": "null",
      "options": {
        "dataLinks": []
      },
      "percentage": false,
      "pointradius": 2,
      "points": false,
      "renderer": "flot",
      "seriesOverrides": [],
      "spaceLength": 10,
      "stack": true,
      "steppedLine": false,
      "targets": [
        {
          "format": "time_series",
          "group": [],
          "metricColumn": "none",
          "orderByCol": "1",
          "orderBySort": "1",
          "rawQuery": true,
          "rawSql": "WITH intervals AS (\n    SELECT\n        interval_start,\n        TIMESTAMP_ADD(interval_start, INTERVAL $__interval_ms*50 MILLISECOND) AS interval_end\n    FROM UNNEST(\n        GENERATE_TIMESTAMP_ARRAY(TIMESTAMP_MILLIS($__from),\n                                 TIMESTAMP_MILLIS($__to),\n                                 INTERVAL $__interval_ms*50 MILLISECOND)\n    ) AS interval_start\n)\nSELECT\n    interval_start AS time,\n    IF(builds.valid IS NULL, \"UNKNOWN\", IF(builds.valid, \"PASS\", \"FAIL\")) AS metric,\n    COUNT(DISTINCT builds.id) AS Builds\nFROM ${dataset}.checkouts AS checkouts, ${dataset}.builds AS builds\nINNER JOIN intervals ON builds.start_time >= interval_start AND builds.start_time < interval_end\nWHERE\n  builds.checkout_id = checkouts.id AND\n  checkouts.git_repository_url = ${git_repository_url:json} AND\n  checkouts.git_repository_branch = ${git_repository_branch:json} AND\n  builds.origin LIKE ${origin} AND\n  IFNULL(builds.architecture LIKE ${build_architecture}, TRUE) AND\n  IFNULL(builds.config_name LIKE ${build_config_name}, TRUE)\nGROUP BY time, metric\nORDER BY time ASC, metric ASC",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "-- value --"
                ],
                "type": "column"
              }
            ]
          ],
          "timeColumn": "-- time --",
          "timeColumnType": "TIMESTAMP",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "thresholds": [],
      "timeFrom": null,
      "timeRegions": [],
      "timeShift": null,
      "title": "Build status",
      "tooltip": {
        "shared": true,
        "sort": 0,
        "value_type": "individual"
      },
      "type": "graph",
      "xaxis": {
        "buckets": null,
        "mode": "time",
        "name": null,
        "show": true,
        "values": []
      },
      "yaxes": [
        {
          "format": "short",
          "label": null,
          "logBase": 1,
          "max": null,
          "min": null,
          "show": true
        },
        {
          "format": "short",
          "label": null,
          "logBase": 1,
          "max": null,
          "min": null,
          "show": true
        }
      ],
      "yaxis": {
        "align": false,
        "alignLevel": null
      }
    },
    {
      "aliasColors": {
        "FAIL": "semi-dark-red",
        "PASS": "semi-dark-green",
        "UNKNOWN": "rgb(128, 128, 128)"
      },
      "bars": false,
      "dashLength": 10,
      "dashes": false,
      "datasource": null,
      "fill": 7,
      "fillGradient": 0,
      "gridPos": {
        "h": 7,
        "w": 12,
        "x": 12,
        "y": 20
      },
      "hiddenSeries": false,
      "id": 22,
      "legend": {
        "avg": false,
        "current": false,
        "max": false,
        "min": false,
        "show": true,
        "total": false,
        "values": false
      },
      "lines": true,
      "linewidth": 0,
      "nullPointMode": "null",
      "options": {
        "dataLinks": []
      },
      "percentage": false,
      "pointradius": 2,
      "points": false,
      "renderer": "flot",
      "seriesOverrides": [],
      "spaceLength": 10,
      "stack": true,
      "steppedLine": false,
      "targets": [
        {
          "format": "time_series",
          "group": [],
          "metricColumn": "none",
          "orderByCol": "1",
          "orderBySort": "1",
          "rawQuery": true,
          "rawSql": "WITH intervals AS (\n    SELECT\n        interval_start,\n        TIMESTAMP_ADD(interval_start, INTERVAL $__interval_ms*50 MILLISECOND) AS interval_end\n    FROM UNNEST(\n        GENERATE_TIMESTAMP_ARRAY(TIMESTAMP_MILLIS($__from),\n                                 TIMESTAMP_MILLIS($__to),\n                                 INTERVAL $__interval_ms*50 MILLISECOND)\n    ) AS interval_start\n)\nSELECT\n  interval_start AS time,\n  IF(tests.status IS NULL, \"UNKNOWN\", tests.status) AS metric,\n  COUNT(DISTINCT tests.id) AS tests\nFROM\n  ${dataset}.checkouts AS checkouts, ${dataset}.builds AS builds, ${dataset}.tests AS tests\nINNER JOIN intervals ON tests.start_time >= interval_start AND tests.start_time < interval_end\nWHERE\n  checkouts.id = builds.checkout_id AND\n  checkouts.git_repository_url = ${git_repository_url:json} AND\n  checkouts.git_repository_branch = ${git_repository_branch:json} AND\n  builds.id = tests.build_id AND\n  NOT tests.waived AND\n  tests.origin LIKE ${origin} AND\n  IFNULL(builds.architecture LIKE ${build_architecture}, TRUE) AND\n  IFNULL(builds.config_name LIKE ${build_config_name}, TRUE)\nGROUP BY\n  time, metric\nORDER BY\n  time ASC, metric ASC",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "-- value --"
                ],
                "type": "column"
              }
            ]
          ],
          "timeColumn": "-- time --",
          "timeColumnType": "TIMESTAMP",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "thresholds": [],
      "timeFrom": null,
      "timeRegions": [],
      "timeShift": null,
      "title": "Test status",
      "tooltip": {
        "shared": true,
        "sort": 0,
        "value_type": "individual"
      },
      "type": "graph",
      "xaxis": {
        "buckets": null,
        "mode": "time",
        "name": null,
        "show": true,
        "values": []
      },
      "yaxes": [
        {
          "format": "short",
          "label": null,
          "logBase": 1,
          "max": null,
          "min": null,
          "show": true
        },
        {
          "format": "short",
          "label": null,
          "logBase": 1,
          "max": null,
          "min": null,
          "show": true
        }
      ],
      "yaxis": {
        "align": false,
        "alignLevel": null
      }
    },
    {
      "aliasColors": {},
      "bars": false,
      "dashLength": 10,
      "dashes": false,
      "datasource": null,
      "fill": 0,
      "fillGradient": 0,
      "gridPos": {
        "h": 7,
        "w": 12,
        "x": 0,
        "y": 27
      },
      "hiddenSeries": false,
      "id": 8,
      "legend": {
        "avg": false,
        "current": false,
        "max": false,
        "min": false,
        "show": true,
        "total": false,
        "values": false
      },
      "lines": true,
      "linewidth": 2,
      "nullPointMode": "null",
      "options": {
        "dataLinks": []
      },
      "percentage": false,
      "pointradius": 2,
      "points": false,
      "renderer": "flot",
      "seriesOverrides": [],
      "spaceLength": 10,
      "stack": false,
      "steppedLine": false,
      "targets": [
        {
          "format": "time_series",
          "group": [],
          "metricColumn": "none",
          "orderByCol": "1",
          "orderBySort": "1",
          "rawQuery": true,
          "rawSql": "WITH intervals AS (\n    SELECT\n        interval_start,\n        TIMESTAMP_ADD(interval_start, INTERVAL $__interval_ms*50 MILLISECOND) AS interval_end\n    FROM UNNEST(\n        GENERATE_TIMESTAMP_ARRAY(TIMESTAMP_MILLIS($__from),\n                                 TIMESTAMP_MILLIS($__to),\n                                 INTERVAL $__interval_ms*50 MILLISECOND)\n    ) AS interval_start\n), filtered_checkouts AS (\n    SELECT\n        checkouts.id AS id,\n        checkouts.origin AS origin,\n        checkouts.start_time AS time\n    FROM\n        ${dataset}.checkouts AS checkouts\n    WHERE\n      \tcheckouts.start_time BETWEEN TIMESTAMP_MILLIS ($__from) AND TIMESTAMP_MILLIS ($__to) AND\n        checkouts.git_repository_url = ${git_repository_url:json} AND\n        checkouts.git_repository_branch = ${git_repository_branch:json}\n), filtered_builds AS (\n    SELECT\n        builds.id AS id,\n        builds.origin AS origin,\n        builds.start_time AS time\n    FROM\n        ${dataset}.builds AS builds,\n        filtered_checkouts\n    WHERE\n    \tbuilds.start_time BETWEEN TIMESTAMP_MILLIS ($__from) AND TIMESTAMP_MILLIS ($__to) AND\n        IFNULL(builds.architecture LIKE ${build_architecture}, TRUE) AND\n        IFNULL(builds.config_name LIKE ${build_config_name}, TRUE) AND\n        filtered_checkouts.id = builds.checkout_id\n), filtered_tests AS (\n    SELECT\n        tests.id AS id,\n        tests.origin AS origin,\n        tests.start_time AS time\n    FROM\n        ${dataset}.tests AS tests,\n        filtered_builds\n    WHERE\n    \ttests.start_time BETWEEN TIMESTAMP_MILLIS ($__from) AND TIMESTAMP_MILLIS ($__to) AND\n        filtered_builds.id = tests.build_id\n)\nSELECT\n    interval_start AS time,\n    counted_checkouts.count AS Checkouts,\n    counted_builds.count AS Builds,\n    counted_tests.count AS Tests\nFROM intervals\nLEFT OUTER JOIN (\n    SELECT interval_start, COUNT(id) AS count,\n    FROM filtered_checkouts\n    INNER JOIN intervals ON time >= interval_start AND time < interval_end\n    WHERE origin LIKE ${origin}\n    GROUP BY interval_start\n) AS counted_checkouts USING(interval_start)\nLEFT OUTER JOIN (\n    SELECT interval_start, COUNT(id) AS count,\n    FROM filtered_builds\n    INNER JOIN intervals ON time >= interval_start AND time < interval_end\n    WHERE origin LIKE ${origin}\n    GROUP BY interval_start\n) AS counted_builds USING(interval_start)\nLEFT OUTER JOIN (\n    SELECT interval_start, COUNT(id) AS count,\n    FROM filtered_tests\n    INNER JOIN intervals ON time >= interval_start AND time < interval_end\n    WHERE origin LIKE ${origin}\n    GROUP BY interval_start\n) AS counted_tests USING(interval_start)",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "-- value --"
                ],
                "type": "column"
              }
            ]
          ],
          "timeColumn": "-- time --",
          "timeColumnType": "TIMESTAMP",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "thresholds": [],
      "timeFrom": null,
      "timeRegions": [],
      "timeShift": null,
      "title": "Reports",
      "tooltip": {
        "shared": true,
        "sort": 0,
        "value_type": "individual"
      },
      "type": "graph",
      "xaxis": {
        "buckets": null,
        "mode": "time",
        "name": null,
        "show": true,
        "values": []
      },
      "yaxes": [
        {
          "format": "short",
          "label": null,
          "logBase": 10,
          "max": null,
          "min": null,
          "show": true
        },
        {
          "format": "short",
          "label": null,
          "logBase": 1,
          "max": null,
          "min": null,
          "show": true
        }
      ],
      "yaxis": {
        "align": false,
        "alignLevel": null
      }
    },
    {
      "aliasColors": {},
      "bars": false,
      "dashLength": 10,
      "dashes": false,
      "datasource": "Google BigQuery",
      "fill": 8,
      "fillGradient": 0,
      "gridPos": {
        "h": 7,
        "w": 12,
        "x": 12,
        "y": 27
      },
      "hiddenSeries": false,
      "id": 10,
      "legend": {
        "avg": false,
        "current": false,
        "max": false,
        "min": false,
        "show": true,
        "total": false,
        "values": false
      },
      "lines": true,
      "linewidth": 0,
      "nullPointMode": "null",
      "options": {
        "dataLinks": []
      },
      "percentage": false,
      "pointradius": 2,
      "points": false,
      "renderer": "flot",
      "seriesOverrides": [],
      "spaceLength": 10,
      "stack": true,
      "steppedLine": false,
      "targets": [
        {
          "convertToUTC": false,
          "dataset": "kcidb_sample",
          "format": "time_series",
          "group": [
            {
              "params": [
                "$__interval",
                "none"
              ],
              "type": "time"
            },
            {
              "params": [
                "architecture"
              ],
              "type": "column"
            }
          ],
          "hide": false,
          "metricColumn": "architecture",
          "orderByCol": "1",
          "orderBySort": "1",
          "partitioned": false,
          "partitionedField": "",
          "project": "kernelci",
          "rawQuery": true,
          "rawSql": "WITH intervals AS (\n    SELECT\n        interval_start,\n        TIMESTAMP_ADD(interval_start, INTERVAL $__interval_ms*50 MILLISECOND) AS interval_end\n    FROM UNNEST(\n        GENERATE_TIMESTAMP_ARRAY(TIMESTAMP_MILLIS($__from),\n                                 TIMESTAMP_MILLIS($__to),\n                                 INTERVAL $__interval_ms*50 MILLISECOND)\n    ) AS interval_start\n)\nSELECT\n  interval_start AS time,\n  builds.architecture AS metric,\n  COUNT(DISTINCT builds.id) AS Builds\nFROM\n  ${dataset}.builds AS builds,\n  ${dataset}.checkouts AS checkouts\nJOIN intervals ON builds.start_time >= interval_start AND builds.start_time < interval_end\nWHERE\n  checkouts.id = builds.checkout_id AND\n  checkouts.git_repository_url = ${git_repository_url:json} AND\n  checkouts.git_repository_branch = ${git_repository_branch:json} AND\n  builds.origin LIKE ${origin} AND\n  builds.architecture LIKE ${build_architecture} AND\n  IFNULL(builds.config_name LIKE ${build_config_name}, TRUE) AND\n  builds.start_time IS NOT NULL AND\n  builds.start_time BETWEEN TIMESTAMP_MILLIS($__from) AND TIMESTAMP_MILLIS($__to)\nGROUP BY\n  time, metric\nORDER BY\n  time ASC, metric ASC",
          "refId": "B",
          "select": [
            [
              {
                "params": [
                  "id"
                ],
                "type": "column"
              },
              {
                "params": [
                  "count"
                ],
                "type": "aggregate"
              },
              {
                "params": [
                  "id"
                ],
                "type": "alias"
              }
            ]
          ],
          "sharded": false,
          "table": "builds",
          "timeColumn": "start_time",
          "timeColumnType": "TIMESTAMP",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "thresholds": [],
      "timeFrom": null,
      "timeRegions": [],
      "timeShift": null,
      "title": "Builds per architecture",
      "tooltip": {
        "shared": true,
        "sort": 0,
        "value_type": "individual"
      },
      "type": "graph",
      "xaxis": {
        "buckets": null,
        "mode": "time",
        "name": null,
        "show": true,
        "values": []
      },
      "yaxes": [
        {
          "format": "short",
          "label": null,
          "logBase": 1,
          "max": null,
          "min": null,
          "show": true
        },
        {
          "format": "short",
          "label": null,
          "logBase": 1,
          "max": null,
          "min": null,
          "show": true
        }
      ],
      "yaxis": {
        "align": false,
        "alignLevel": null
      }
    }
  ],
  "schemaVersion": 22,
  "style": "dark",
  "tags": [],
  "templating": {
    "list": [
      {
        "current": {
          "selected": true,
          "text": "kcidb_sample",
          "value": "kcidb_sample"
        },
        "hide": 2,
        "label": null,
        "name": "dataset",
        "options": [
          {
            "selected": true,
            "text": "kcidb_sample",
            "value": "kcidb_sample"
          }
        ],
        "query": "kcidb_sample",
        "skipUrlSync": false,
        "type": "constant"
      },
      {
        "allValue": null,
        "current": {
          "selected": false,
          "text": "https://gitlab.com/redhat/centos-stream/src/kernel/centos-stream-9.git",
          "value": "https://gitlab.com/redhat/centos-stream/src/kernel/centos-stream-9.git"
        },
        "datasource": "Google BigQuery",
        "definition": "SELECT DISTINCT git_repository_url FROM ${dataset}.checkouts",
        "hide": 0,
        "includeAll": false,
        "label": "Repository URL",
        "multi": false,
        "name": "git_repository_url",
        "options": [],
        "query": "SELECT DISTINCT git_repository_url FROM ${dataset}.checkouts",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 1,
        "tagValuesQuery": "",
        "tags": [],
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      },
      {
        "allValue": null,
        "current": {
          "selected": false,
          "text": "main",
          "value": "main"
        },
        "datasource": "Google BigQuery",
        "definition": "SELECT DISTINCT git_repository_branch FROM ${dataset}.checkouts WHERE git_repository_url = ${git_repository_url:json}",
        "hide": 0,
        "includeAll": false,
        "label": "Name",
        "multi": false,
        "name": "git_repository_branch",
        "options": [],
        "query": "SELECT DISTINCT git_repository_branch FROM ${dataset}.checkouts WHERE git_repository_url = ${git_repository_url:json}",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 1,
        "tagValuesQuery": "",
        "tags": [],
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      },
      {
        "allValue": "\"%\"",
        "current": {
          "selected": true,
          "text": "All",
          "value": "$__all"
        },
        "datasource": "Google BigQuery",
        "definition": "SELECT DISTINCT origin FROM ${dataset}.checkouts",
        "hide": 0,
        "includeAll": true,
        "label": "Origin",
        "multi": false,
        "name": "origin",
        "options": [],
        "query": "SELECT DISTINCT origin FROM ${dataset}.checkouts",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 1,
        "tagValuesQuery": "",
        "tags": [],
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      },
      {
        "allValue": "\"%\"",
        "current": {
          "selected": true,
          "text": "All",
          "value": "$__all"
        },
        "datasource": "Google BigQuery",
        "definition": "SELECT DISTINCT architecture FROM ${dataset}.builds",
        "hide": 0,
        "includeAll": true,
        "label": "Build architecture",
        "multi": false,
        "name": "build_architecture",
        "options": [],
        "query": "SELECT DISTINCT architecture FROM ${dataset}.builds",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 1,
        "tagValuesQuery": "",
        "tags": [],
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      },
      {
        "allValue": "\"%\"",
        "current": {
          "selected": true,
          "text": "All",
          "value": "$__all"
        },
        "datasource": "Google BigQuery",
        "definition": "SELECT DISTINCT config_name FROM ${dataset}.builds",
        "hide": 0,
        "includeAll": true,
        "label": "Build configuration",
        "multi": false,
        "name": "build_config_name",
        "options": [],
        "query": "SELECT DISTINCT config_name FROM ${dataset}.builds",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 1,
        "tagValuesQuery": "",
        "tags": [],
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      }
    ]
  },
  "time": {
    "from": "now-7d",
    "to": "now"
  },
  "timepicker": {
    "refresh_intervals": [
      "5s",
      "10s",
      "30s",
      "1m",
      "5m",
      "15m",
      "30m",
      "1h",
      "2h",
      "1d"
    ]
  },
  "timezone": "",
  "title": "Branch",
  "uid": "branch",
  "version": 13
}
