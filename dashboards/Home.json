{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": "-- Grafana --",
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "gnetId": null,
  "graphTooltip": 0,
  "id": 1,
  "iteration": 1712942625866,
  "links": [],
  "panels": [
    {
      "content": "Welcome to Linux Kernel CI report database (**KCIDB**) dashboard.\nHere you can find testing reports aggregated from multiple CI systems (\"**origins**\"), sent in the past six months.\nThis is a work in progress, and we welcome contributions and participation.\nSee the source code for [the collection system][kcidb], and for [this dashboard][kcidb-grafana].\nWrite to [kernelci@lists.linux.dev][maillist] if you want to start submitting results from your CI system,\nor if you want to receive customized notifications of arriving results.\n\n[kcidb]: https://github.com/kernelci/kcidb/\n[kcidb-grafana]: https://github.com/kernelci/kcidb-grafana/\n[maillist]: mailto:kernelci@lists.linux.dev",
      "datasource": "$datasource",
      "gridPos": {
        "h": 3,
        "w": 24,
        "x": 0,
        "y": 0
      },
      "id": 7,
      "mode": "markdown",
      "options": {},
      "timeFrom": null,
      "timeShift": null,
      "title": "Welcome",
      "transparent": true,
      "type": "text"
    },
    {
      "columns": [],
      "datasource": "$datasource",
      "fontSize": "100%",
      "gridPos": {
        "h": 9,
        "w": 24,
        "x": 0,
        "y": 3
      },
      "id": 9,
      "options": {},
      "pageSize": 6,
      "showHeader": true,
      "sort": {
        "col": null,
        "desc": false
      },
      "styles": [
        {
          "alias": "URL",
          "align": "left",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "decimals": 2,
          "link": true,
          "linkTooltip": "View repository",
          "linkUrl": "/d/repository/repository?orgId=1&var-datasource=${datasource}&var-origin=${__cell_0}&var-build_architecture=${__cell_1}&var-build_config_name=${__cell_2}&var-git_repository_url=${__cell_3}",
          "pattern": "git_repository_url",
          "thresholds": [],
          "type": "string",
          "unit": "short"
        },
        {
          "alias": "Checkouts",
          "align": "right",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 0,
          "link": true,
          "linkTooltip": "View repository",
          "linkUrl": "/d/repository/repository?orgId=1&var-datasource=${datasource}&var-origin=${__cell_0}&var-build_architecture=${__cell_1}&var-build_config_name=${__cell_2}&var-git_repository_url=${__cell_3}",
          "mappingType": 1,
          "pattern": "checkouts",
          "thresholds": [],
          "type": "number",
          "unit": "none"
        },
        {
          "alias": "Branches",
          "align": "auto",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "link": true,
          "linkTooltip": "View repository",
          "linkUrl": "/d/repository/repository?orgId=1&var-datasource=${datasource}&var-origin=${__cell_0}&var-build_architecture=${__cell_1}&var-build_config_name=${__cell_2}&var-git_repository_url=${__cell_3}",
          "mappingType": 1,
          "pattern": "git_repository_branches_string",
          "thresholds": [],
          "type": "string",
          "unit": "short"
        },
        {
          "alias": "",
          "align": "auto",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "mappingType": 1,
          "pattern": "/.*_param/",
          "thresholds": [],
          "type": "hidden",
          "unit": "short"
        }
      ],
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "/* Massage */\nSELECT\n    CASE WHEN $origin = '%' THEN 'All' ELSE $origin END AS origin_param,\n    CASE WHEN $build_architecture = '%' THEN 'All' ELSE $build_architecture END AS build_architecture_param,\n    CASE WHEN $build_config_name = '%' THEN 'All' ELSE $build_config_name END AS build_config_name_param,\n    git_repository_url,\n    COALESCE(\n        CASE WHEN ARRAY_LENGTH(git_repository_branches, 1) <= 3\n        THEN ARRAY_TO_STRING(git_repository_branches, ', ')\n        ELSE\n            (\n                SELECT STRING_AGG(branch, ', ') || ' (+' || (ARRAY_LENGTH(git_repository_branches, 1) - 3) || ')'\n                FROM (\n                    SELECT branch FROM UNNEST(git_repository_branches) AS branch ORDER BY branch DESC LIMIT 3\n                ) AS three_branches\n            )\n        END,\n        ''\n    ) AS git_repository_branches_string,\n    COALESCE(checkouts, 0) AS checkouts\nFROM (\n    /* Aggregate */\n    SELECT git_repository_url, git_repository_branches, checkouts\n    FROM (\n        SELECT DISTINCT git_repository_url\n        FROM checkouts\n        WHERE git_repository_url IS NOT NULL\n    ) AS git_repositories\n    LEFT OUTER JOIN (\n        SELECT\n            git_repository_url,\n            ARRAY_AGG(DISTINCT git_repository_branch) AS git_repository_branches,\n            COUNT(id) AS checkouts\n        FROM checkouts\n        WHERE\n            start_time BETWEEN TO_TIMESTAMP($__from / 1000) AND TO_TIMESTAMP($__to / 1000) AND\n            origin LIKE $origin\n        GROUP BY git_repository_url\n    ) AS git_repository_branches_and_checkout_counts USING(git_repository_url)\n) AS distinct_git_repositories_branches_and_checkout_counts\nORDER BY checkouts DESC, git_repository_url ASC",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "column"
              }
            ]
          ],
          "timeColumn": "time",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "Repositories",
      "transform": "table",
      "type": "table"
    },
    {
      "columns": [],
      "datasource": "$datasource",
      "description": "",
      "fontSize": "100%",
      "gridPos": {
        "h": 11,
        "w": 24,
        "x": 0,
        "y": 12
      },
      "id": 14,
      "options": {},
      "pageSize": 8,
      "showHeader": true,
      "sort": {
        "col": null,
        "desc": false
      },
      "styles": [
        {
          "alias": "Origins",
          "align": "auto",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "link": true,
          "linkTooltip": "View node",
          "linkUrl": "/d/test-node/test-node?orgId=1&var-datasource=${datasource}&var-origin=${__cell_0}&var-build_architecture=${__cell_1}&var-build_config_name=${__cell_2}&var-test_path=${__cell_4}",
          "mappingType": 1,
          "pattern": "origins",
          "thresholds": [],
          "type": "string",
          "unit": "short"
        },
        {
          "alias": "Name",
          "align": "auto",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "link": true,
          "linkTooltip": "View node",
          "linkUrl": "/d/test-node/test-node?orgId=1&var-datasource=${datasource}&var-origin=${__cell_0}&var-build_architecture=${__cell_1}&var-build_config_name=${__cell_2}&var-test_path=${__cell_4}",
          "mappingType": 1,
          "pattern": "path",
          "thresholds": [],
          "type": "string",
          "unit": "short"
        },
        {
          "alias": "Arches",
          "align": "auto",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "link": true,
          "linkTooltip": "View node",
          "linkUrl": "/d/test-node/test-node?orgId=1&var-datasource=${datasource}&var-origin=${__cell_0}&var-build_architecture=${__cell_1}&var-build_config_name=${__cell_2}&var-test_path=${__cell_4}",
          "mappingType": 1,
          "pattern": "architectures",
          "thresholds": [],
          "type": "string",
          "unit": "short"
        },
        {
          "alias": "Tests",
          "align": "right",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 0,
          "link": true,
          "linkTooltip": "View node",
          "linkUrl": "/d/test-node/test-node?orgId=1&var-datasource=${datasource}&var-origin=${__cell_0}&var-build_architecture=${__cell_1}&var-build_config_name=${__cell_2}&var-test_path=${__cell_4}",
          "mappingType": 1,
          "pattern": "tests",
          "thresholds": [],
          "type": "number",
          "unit": "none"
        },
        {
          "alias": "Status",
          "align": "auto",
          "colorMode": "cell",
          "colors": [
            "rgba(55, 135, 45, 0)",
            "#316d2b",
            "#9b1928"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "link": true,
          "linkTooltip": "View node",
          "linkUrl": "/d/test-node/test-node?orgId=1&var-datasource=${datasource}&var-origin=${__cell_0}&var-build_architecture=${__cell_1}&var-build_config_name=${__cell_2}&var-test_path=${__cell_4}",
          "mappingType": 1,
          "pattern": "status_num",
          "thresholds": [
            "3",
            "5"
          ],
          "type": "string",
          "unit": "short",
          "valueMaps": [
            {
              "op": "=",
              "text": "​ ​ ​ ​",
              "value": "-14"
            },
            {
              "op": "=",
              "text": "❓⏩ SKIP",
              "value": "-13"
            },
            {
              "op": "=",
              "text": "❓🆗 DONE",
              "value": "-12"
            },
            {
              "op": "=",
              "text": "❓✅ PASS",
              "value": "-11"
            },
            {
              "op": "=",
              "text": "❓🟩 MISS",
              "value": "-10"
            },
            {
              "op": "=",
              "text": "❓💥 ERROR",
              "value": "-9"
            },
            {
              "op": "=",
              "text": "❓❌ FAIL",
              "value": "-8"
            },
            {
              "op": "=",
              "text": "​ ​ ​ ​",
              "value": "-7"
            },
            {
              "op": "=",
              "text": "🚧⏩ SKIP",
              "value": "-6"
            },
            {
              "op": "=",
              "text": "🚧🆗 DONE",
              "value": "-5"
            },
            {
              "op": "=",
              "text": "🚧✅ PASS",
              "value": "-4"
            },
            {
              "op": "=",
              "text": "🚧🟩 MISS",
              "value": "-3"
            },
            {
              "op": "=",
              "text": "🚧💥 ERROR",
              "value": "-2"
            },
            {
              "op": "=",
              "text": "🚧❌ FAIL",
              "value": "-1"
            },
            {
              "op": "=",
              "text": "​ ​ ​ ​",
              "value": "0"
            },
            {
              "op": "=",
              "text": "⏩ SKIP",
              "value": "1"
            },
            {
              "op": "=",
              "text": "🆗 DONE",
              "value": "2"
            },
            {
              "op": "=",
              "text": "✅ PASS",
              "value": "3"
            },
            {
              "op": "=",
              "text": "🟩 MISS",
              "value": "4"
            },
            {
              "op": "=",
              "text": "💥 ERROR",
              "value": "5"
            },
            {
              "op": "=",
              "text": "❌ FAIL",
              "value": "6"
            }
          ]
        },
        {
          "alias": "",
          "align": "auto",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "link": false,
          "mappingType": 1,
          "pattern": "/.*_param/",
          "thresholds": [],
          "type": "hidden",
          "unit": "short"
        },
        {
          "alias": "",
          "align": "auto",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "mappingType": 1,
          "pattern": "path",
          "thresholds": [],
          "type": "hidden",
          "unit": "short"
        }
      ],
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "/* Aggregate */\nSELECT\n    CASE WHEN $origin = '%' THEN 'All' ELSE $origin END AS origin_param,\n    CASE WHEN $build_architecture = '%' THEN 'All' ELSE $build_architecture END AS build_architecture_param,\n    CASE WHEN $build_config_name = '%' THEN 'All' ELSE $build_config_name END AS build_config_name_param,\n    STRING_AGG(DISTINCT origin, ', ') AS origins,\n    LEFT(base_prefix, CHAR_LENGTH(base_prefix) - 1) AS path,\n    STRING_AGG(DISTINCT architecture, ', ') AS architectures,\n    COUNT(id) AS tests,\n    MAX(COALESCE(array_position(ARRAY['SKIP', 'DONE', 'PASS', 'MISS', 'ERROR', 'FAIL'], status::text), 0) - COALESCE(waived::int, 2) * 7) AS status_num\nFROM (\n    /* Filter tests and extract path prefixes */\n    SELECT\n        tests.origin,\n        tests.id,\n        /* The topmost prefix of the test path */\n        COALESCE(\n            /* Cut the test path up to and including the first dot */\n            LEFT(tests.path, NULLIF(POSITION('.' IN SUBSTRING(tests.path FROM 2)), 0) + 1),\n            tests.path || '.'\n        ) AS base_prefix,\n        builds.architecture,\n        tests.status AS status,\n        tests.waived AS waived\n    FROM tests\n    INNER JOIN\n        builds\n        ON\n            builds.start_time BETWEEN TO_TIMESTAMP($__from / 1000) AND TO_TIMESTAMP($__to / 1000) AND\n            ($origin = '%' or builds.origin LIKE $origin) AND\n            tests.build_id = builds.id AND\n            ($build_architecture = '%' OR builds.architecture LIKE $build_architecture) AND\n            ($build_config_name = '%' OR builds.config_name LIKE $build_config_name)\n    WHERE\n        tests.start_time BETWEEN TO_TIMESTAMP($__from / 1000) AND TO_TIMESTAMP($__to / 1000) AND\n        ($origin = '%' or tests.origin LIKE $origin) AND\n        tests.path IS NOT NULL AND\n        tests.path != ''\n) AS filtered_tests\nGROUP BY\n    base_prefix\nORDER BY\n    tests DESC,\n    base_prefix ASC",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "column"
              }
            ]
          ],
          "timeColumn": "time",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "Test nodes",
      "transform": "table",
      "type": "table"
    },
    {
      "columns": [],
      "datasource": "$datasource",
      "fontSize": "100%",
      "gridPos": {
        "h": 16,
        "w": 24,
        "x": 0,
        "y": 23
      },
      "id": 2,
      "maxDataPoints": "250",
      "options": {},
      "pageSize": 6,
      "showHeader": true,
      "sort": {
        "col": null,
        "desc": false
      },
      "styles": [
        {
          "alias": "Checkouts ​ ​ ​",
          "align": "left",
          "colorMode": "cell",
          "colors": [
            "rgba(242, 73, 92, 0)",
            "#316d2b",
            "#9b1928"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "link": true,
          "linkTooltip": "View revision",
          "linkUrl": "/d/revision/revision?orgId=1&var-datasource=${datasource}&var-origin=${__cell_0}&var-build_architecture=${__cell_1}&var-build_config_name=${__cell_2}&var-git_commit_hash=${__cell_3}&var-patchset_hash=${__cell_4}",
          "mappingType": 1,
          "pattern": "checkouts_valid_num",
          "thresholds": [
            "0",
            "1"
          ],
          "type": "string",
          "unit": "short",
          "valueMaps": [
            {
              "text": "​ ​ ​ ​",
              "value": "-1"
            },
            {
              "text": "✅ PASS",
              "value": "0"
            },
            {
              "text": "❌ FAIL",
              "value": "1"
            }
          ]
        },
        {
          "alias": "",
          "align": "auto",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "link": false,
          "mappingType": 1,
          "pattern": "git_commit_hash",
          "thresholds": [],
          "type": "hidden",
          "unit": "short"
        },
        {
          "alias": "Repositories",
          "align": "auto",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "link": false,
          "linkTooltip": "View revision",
          "linkUrl": "/d/revision/revision?orgId=1&var-datasource=${datasource}&var-origin=${__cell_0}&var-build_architecture=${__cell_1}&var-build_config_name=${__cell_2}&var-git_commit_hash=${__cell_3}&var-patchset_hash=${__cell_4}",
          "mappingType": 1,
          "pattern": "git_repository_urls_text",
          "preserveFormat": true,
          "sanitize": false,
          "thresholds": [],
          "type": "string",
          "unit": "short"
        },
        {
          "alias": "Branches",
          "align": "auto",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "link": false,
          "linkTooltip": "View revision",
          "linkUrl": "/d/revision/revision?orgId=1&var-datasource=${datasource}&var-origin=${__cell_0}&var-build_architecture=${__cell_1}&var-build_config_name=${__cell_2}&var-git_commit_hash=${__cell_3}&var-patchset_hash=${__cell_4}",
          "mappingType": 1,
          "pattern": "git_repository_branches_text",
          "preserveFormat": true,
          "sanitize": false,
          "thresholds": [],
          "type": "string",
          "unit": "short"
        },
        {
          "alias": "Commit names",
          "align": "auto",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "link": false,
          "linkTooltip": "View revision",
          "linkUrl": "/d/revision/revision?orgId=1&var-datasource=${datasource}&var-origin=${__cell_0}&var-build_architecture=${__cell_1}&var-build_config_name=${__cell_2}&var-git_commit_hash=${__cell_3}&var-patchset_hash=${__cell_4}",
          "mappingType": 1,
          "pattern": "git_commit_names_text",
          "preserveFormat": true,
          "sanitize": false,
          "thresholds": [],
          "type": "string",
          "unit": "short"
        },
        {
          "alias": "Commit hash",
          "align": "auto",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "link": true,
          "linkTooltip": "View revision",
          "linkUrl": "/d/revision/revision?orgId=1&var-datasource=${datasource}&var-origin=${__cell_0}&var-build_architecture=${__cell_1}&var-build_config_name=${__cell_2}&var-git_commit_hash=${__cell_3}&var-patchset_hash=${__cell_4}",
          "mappingType": 1,
          "pattern": "git_commit_hash_short",
          "thresholds": [],
          "type": "string",
          "unit": "short"
        },
        {
          "alias": "First checkout",
          "align": "auto",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "link": true,
          "linkTooltip": "View revision",
          "linkUrl": "/d/revision/revision?orgId=1&var-datasource=${datasource}&var-origin=${__cell_0}&var-build_architecture=${__cell_1}&var-build_config_name=${__cell_2}&var-git_commit_hash=${__cell_3}&var-patchset_hash=${__cell_4}",
          "mappingType": 1,
          "pattern": "checkouts_start_time_str",
          "thresholds": [],
          "type": "string",
          "unit": "short"
        },
        {
          "alias": "Builds​ ​ ​ ​",
          "align": "left",
          "colorMode": "cell",
          "colors": [
            "rgba(245, 54, 54, 0)",
            "#316d2b",
            "#9b1928"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "link": true,
          "linkTooltip": "View revision",
          "linkUrl": "/d/revision/revision?orgId=1&var-datasource=${datasource}&var-origin=${__cell_0}&var-build_architecture=${__cell_1}&var-build_config_name=${__cell_2}&var-git_commit_hash=${__cell_3}&var-patchset_hash=${__cell_4}",
          "mappingType": 1,
          "pattern": "builds_valid_num",
          "thresholds": [
            "0",
            "1"
          ],
          "type": "string",
          "unit": "short",
          "valueMaps": [
            {
              "text": "​ ​ ​ ​",
              "value": "-1"
            },
            {
              "text": "✅ PASS",
              "value": "0"
            },
            {
              "text": "❌ FAIL",
              "value": "1"
            }
          ]
        },
        {
          "alias": "Tests​ ​ ​ ​",
          "align": "auto",
          "colorMode": "cell",
          "colors": [
            "rgba(55, 135, 45, 0)",
            "#316d2b",
            "#9b1928"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "link": true,
          "linkTooltip": "View revision",
          "linkUrl": "/d/revision/revision?orgId=1&var-datasource=${datasource}&var-origin=${__cell_0}&var-build_architecture=${__cell_1}&var-build_config_name=${__cell_2}&var-git_commit_hash=${__cell_3}&var-patchset_hash=${__cell_4}",
          "mappingType": 1,
          "pattern": "tests_status_num",
          "thresholds": [
            "3",
            "5"
          ],
          "type": "string",
          "unit": "short",
          "valueMaps": [
            {
              "op": "=",
              "text": "​ ​ ​ ​",
              "value": "-14"
            },
            {
              "op": "=",
              "text": "❓⏩ SKIP",
              "value": "-13"
            },
            {
              "op": "=",
              "text": "❓🆗 DONE",
              "value": "-12"
            },
            {
              "op": "=",
              "text": "❓✅ PASS",
              "value": "-11"
            },
            {
              "op": "=",
              "text": "❓🟩 MISS",
              "value": "-10"
            },
            {
              "op": "=",
              "text": "❓💥 ERROR",
              "value": "-9"
            },
            {
              "op": "=",
              "text": "❓❌ FAIL",
              "value": "-8"
            },
            {
              "op": "=",
              "text": "​ ​ ​ ​",
              "value": "-7"
            },
            {
              "op": "=",
              "text": "🚧⏩ SKIP",
              "value": "-6"
            },
            {
              "op": "=",
              "text": "🚧🆗 DONE",
              "value": "-5"
            },
            {
              "op": "=",
              "text": "🚧✅ PASS",
              "value": "-4"
            },
            {
              "op": "=",
              "text": "🚧🟩 MISS",
              "value": "-3"
            },
            {
              "op": "=",
              "text": "🚧💥 ERROR",
              "value": "-2"
            },
            {
              "op": "=",
              "text": "🚧❌ FAIL",
              "value": "-1"
            },
            {
              "op": "=",
              "text": "​ ​ ​ ​",
              "value": "0"
            },
            {
              "op": "=",
              "text": "⏩ SKIP",
              "value": "1"
            },
            {
              "op": "=",
              "text": "🆗 DONE",
              "value": "2"
            },
            {
              "op": "=",
              "text": "✅ PASS",
              "value": "3"
            },
            {
              "op": "=",
              "text": "🟩 MISS",
              "value": "4"
            },
            {
              "op": "=",
              "text": "💥 ERROR",
              "value": "5"
            },
            {
              "op": "=",
              "text": "❌ FAIL",
              "value": "6"
            }
          ]
        },
        {
          "alias": "",
          "align": "auto",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "mappingType": 1,
          "pattern": "patchset_hash",
          "thresholds": [],
          "type": "hidden",
          "unit": "short"
        },
        {
          "alias": "Patchset hash",
          "align": "auto",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "link": true,
          "linkTooltip": "View revision",
          "linkUrl": "/d/revision/revision?orgId=1&var-datasource=${datasource}&var-origin=${__cell_0}&var-build_architecture=${__cell_1}&var-build_config_name=${__cell_2}&var-git_commit_hash=${__cell_3}&var-patchset_hash=${__cell_4}",
          "mappingType": 1,
          "pattern": "patchset_hash_short",
          "thresholds": [],
          "type": "string",
          "unit": "short"
        },
        {
          "alias": "Origins",
          "align": "auto",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "link": true,
          "linkTooltip": "View revision",
          "linkUrl": "/d/revision/revision?orgId=1&var-datasource=${datasource}&var-origin=${__cell_0}&var-build_architecture=${__cell_1}&var-build_config_name=${__cell_2}&var-git_commit_hash=${__cell_3}&var-patchset_hash=${__cell_4}",
          "mappingType": 1,
          "pattern": "origins_str",
          "thresholds": [],
          "type": "string",
          "unit": "short"
        },
        {
          "alias": "",
          "align": "auto",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "mappingType": 1,
          "pattern": "/.*_param/",
          "thresholds": [],
          "type": "hidden",
          "unit": "short"
        },
        {
          "alias": "",
          "align": "left",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "link": true,
          "linkTooltip": "View revision",
          "linkUrl": "/d/revision/revision?orgId=1&var-datasource=${datasource}&var-origin=${__cell_0}&var-build_architecture=${__cell_1}&var-build_config_name=${__cell_2}&var-git_commit_hash=${__cell_3}&var-patchset_hash=${__cell_4}",
          "mappingType": 1,
          "pattern": "/.*/",
          "thresholds": [],
          "type": "string",
          "unit": "short"
        }
      ],
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "/*\n * Truncate a string with an ellipsis at speсified length.\n */\nCREATE OR REPLACE FUNCTION pg_temp.TRUNCATE(str TEXT, len INT)\nRETURNS TEXT AS $$\nBEGIN\n    IF len = 0 OR CHAR_LENGTH(str) <= len THEN\n        RETURN str;\n    ELSE\n        RETURN SUBSTRING(str FROM 1 FOR len - 1) || '…';\n    END IF;\nEND;\n$$ LANGUAGE plpgsql;\n\n/*\n * Replace NULL or empty string with a non-breaking space,\n * truncate anything else with ellipsis, if necessary.\n */\nCREATE OR REPLACE FUNCTION pg_temp.BLANK_OR_TRUNCATE(str TEXT, len INT)\nRETURNS TEXT AS $$\nBEGIN\n    IF str IS NULL OR str = '' THEN\n        RETURN ' ';\n    ELSE\n        RETURN pg_temp.TRUNCATE(str, len);\n    END IF;\nEND;\n$$ LANGUAGE plpgsql;\n\n/*\n * Format an array of strings as a three-line text with ellipsis\n */\nCREATE OR REPLACE FUNCTION pg_temp.ARRAY_TO_TEXT(strs TEXT[], width INT)\nRETURNS TEXT AS $$\nBEGIN\n    RETURN CONCAT_WS(\n        E'\\n',\n        pg_temp.BLANK_OR_TRUNCATE(strs[1], width),\n        pg_temp.BLANK_OR_TRUNCATE(strs[2], width),\n        CASE WHEN array_length(strs, 1) > 3 THEN '…' ELSE pg_temp.BLANK_OR_TRUNCATE(strs[3], width) END\n    );\nEND;\n$$ LANGUAGE plpgsql;\n\nWITH\n    filtered_checkouts AS (\n        SELECT\n            id,\n            origin,\n            git_commit_hash,\n            patchset_hash,\n            git_repository_url,\n            git_repository_branch,\n            git_commit_name,\n            start_time,\n            valid\n        FROM\n            checkouts\n        WHERE\n            checkouts.start_time BETWEEN TO_TIMESTAMP($__from / 1000) AND TO_TIMESTAMP($__to / 1000) AND\n            ($origin = '%' OR checkouts.origin LIKE $origin)\n    ),\n    revision_sources AS (\n        SELECT\n            git_commit_hash,\n            patchset_hash,\n            pg_temp.ARRAY_TO_TEXT(\n                ARRAY_AGG(git_repository_url_str\n                          ORDER BY rank DESC, git_repository_url_str,\n                                   git_repository_branch_str, git_commit_name_str),\n                128\n            ) AS git_repository_urls_text,\n            pg_temp.ARRAY_TO_TEXT(\n                ARRAY_AGG(git_repository_branch_str\n                          ORDER BY rank DESC, git_repository_url_str,\n                                   git_repository_branch_str, git_commit_name_str),\n                32\n            ) AS git_repository_branches_text,\n            pg_temp.ARRAY_TO_TEXT(\n                ARRAY_AGG(git_commit_name_str\n                          ORDER BY rank DESC, git_repository_url_str,\n                                   git_repository_branch_str, git_commit_name_str),\n                32\n            ) AS git_commit_names_text\n        FROM (\n            SELECT\n                git_commit_hash,\n                patchset_hash,\n                git_repository_url_str,\n                git_repository_branch_str,\n                git_commit_name_str,\n                CASE WHEN git_repository_url_str = '' THEN 0 ELSE 4 END +\n                    CASE WHEN git_repository_branch_str = '' THEN 0 ELSE 2 END +\n                    CASE WHEN git_commit_name_str = '' THEN 0 ELSE 1 END AS rank\n            FROM (\n                SELECT DISTINCT\n                    git_commit_hash,\n                    patchset_hash,\n                    COALESCE(git_repository_url, '') AS git_repository_url_str,\n                    COALESCE(git_repository_branch, '') AS git_repository_branch_str,\n                    COALESCE(git_commit_name, '') AS git_commit_name_str\n                FROM\n                    filtered_checkouts\n            ) AS distinct_revisions_with_info\n        ) AS ranked_distinct_revisions_with_info\n        GROUP BY\n            git_commit_hash,\n            patchset_hash\n    )\n/* Massage and join with sources */\nSELECT\n    CASE WHEN $origin = '%' THEN 'All' ELSE $origin END AS origin_param,\n    CASE WHEN $build_architecture = '%' THEN 'All' ELSE $build_architecture END AS build_architecture_param,\n    CASE WHEN $build_config_name = '%' THEN 'All' ELSE $build_config_name END AS build_config_name_param,\n    revisions.git_commit_hash,\n    revisions.patchset_hash,\n    origins_str,\n    LEFT(revisions.git_commit_hash, 12) AS git_commit_hash_short,\n    revision_sources.git_repository_urls_text,\n    revision_sources.git_repository_branches_text,\n    revision_sources.git_commit_names_text,\n    LEFT(revisions.patchset_hash, 12) AS patchset_hash_short,\n    COALESCE(CAST(checkouts_start_time AS TEXT), '') AS checkouts_start_time_str,\n    checkouts_valid_num,\n    builds_valid_num,\n    tests_status_num\nFROM (\n    /* Calculate revision statuses */\n    SELECT\n        checkouts.git_commit_hash,\n        checkouts.patchset_hash,\n        STRING_AGG(DISTINCT checkouts.origin, ', ') AS origins_str,\n        MIN(checkouts.start_time) AS checkouts_start_time,\n        CASE MIN(checkouts.valid::int) WHEN 0 THEN 1 WHEN 1 THEN 0 ELSE -1 END AS checkouts_valid_num,\n        CASE MIN(builds.valid::int) WHEN 0 THEN 1 WHEN 1 THEN 0 ELSE -1 END AS builds_valid_num,\n        MAX(COALESCE(array_position(ARRAY['SKIP', 'DONE', 'PASS', 'MISS', 'ERROR', 'FAIL'], tests.status::text), 0) - COALESCE(tests.waived::int, 2) * 7) AS tests_status_num\n    FROM\n        filtered_checkouts AS checkouts\n    LEFT OUTER JOIN\n        builds\n        ON\n            builds.start_time BETWEEN TO_TIMESTAMP($__from / 1000) AND TO_TIMESTAMP($__to / 1000) AND\n            ($origin = '%' OR builds.origin LIKE $origin) AND\n            builds.checkout_id = checkouts.id AND\n            ($build_architecture = '%' OR builds.architecture LIKE $build_architecture) AND\n            ($build_config_name = '%' OR builds.config_name LIKE $build_config_name)\n    LEFT OUTER JOIN\n        tests\n        ON\n            tests.start_time BETWEEN TO_TIMESTAMP($__from / 1000) AND TO_TIMESTAMP($__to / 1000) AND\n            ($origin = '%' OR tests.origin LIKE $origin) AND\n            tests.build_id = builds.id\n    GROUP BY\n        checkouts.git_commit_hash,\n        checkouts.patchset_hash\n) AS revisions\nINNER JOIN\n    revision_sources\n    ON\n        revision_sources.git_commit_hash = revisions.git_commit_hash AND\n        revision_sources.patchset_hash = revisions.patchset_hash\nORDER BY\n    checkouts_start_time DESC",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "column"
              }
            ]
          ],
          "timeColumn": "time",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "Revisions",
      "transform": "table",
      "type": "table"
    },
    {
      "aliasColors": {
        "FAIL": "semi-dark-red",
        "PASS": "semi-dark-green"
      },
      "bars": false,
      "dashLength": 10,
      "dashes": false,
      "datasource": "$datasource",
      "fill": 7,
      "fillGradient": 0,
      "gridPos": {
        "h": 8,
        "w": 12,
        "x": 0,
        "y": 39
      },
      "hiddenSeries": false,
      "id": 11,
      "legend": {
        "avg": false,
        "current": false,
        "max": false,
        "min": false,
        "show": true,
        "total": false,
        "values": false
      },
      "lines": true,
      "linewidth": 0,
      "nullPointMode": "null",
      "options": {
        "dataLinks": []
      },
      "percentage": false,
      "pointradius": 2,
      "points": false,
      "renderer": "flot",
      "seriesOverrides": [],
      "spaceLength": 10,
      "stack": true,
      "steppedLine": false,
      "targets": [
        {
          "format": "time_series",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT\n    date_bin(($__interval_ms * 50 || ' milliseconds')::interval,\n             builds.start_time,\n             TO_TIMESTAMP($__from / 1000)) AS time,\n    CASE\n        WHEN builds.valid IS TRUE THEN 'PASS'\n        WHEN builds.valid IS FALSE THEN 'FAIL'\n        ELSE 'UNKNOWN'\n    END AS metric,\n    COUNT(builds.id) AS builds\nFROM builds\nWHERE\n  builds.start_time BETWEEN TO_TIMESTAMP($__from / 1000) AND TO_TIMESTAMP($__to / 1000) AND\n  ($origin = '%' or builds.origin LIKE $origin) AND\n  ($build_architecture = '%' OR builds.architecture LIKE $build_architecture) AND\n  ($build_config_name = '%' OR builds.config_name LIKE $build_config_name)\nGROUP BY time, builds.valid\nORDER BY time",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "duration"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "tests",
          "timeColumn": "_timestamp",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "thresholds": [],
      "timeFrom": null,
      "timeRegions": [],
      "timeShift": null,
      "title": "Build status",
      "tooltip": {
        "shared": true,
        "sort": 0,
        "value_type": "individual"
      },
      "type": "graph",
      "xaxis": {
        "buckets": null,
        "mode": "time",
        "name": null,
        "show": true,
        "values": []
      },
      "yaxes": [
        {
          "format": "short",
          "label": null,
          "logBase": 1,
          "max": null,
          "min": null,
          "show": true
        },
        {
          "format": "short",
          "label": null,
          "logBase": 1,
          "max": null,
          "min": null,
          "show": true
        }
      ],
      "yaxis": {
        "align": false,
        "alignLevel": null
      }
    },
    {
      "aliasColors": {
        "ERROR": "semi-dark-orange",
        "FAIL": "semi-dark-red",
        "PASS": "semi-dark-green",
        "SKIP": "semi-dark-blue",
        "UNKNOWN": "rgb(128, 128, 128)"
      },
      "bars": false,
      "dashLength": 10,
      "dashes": false,
      "datasource": "$datasource",
      "fill": 7,
      "fillGradient": 0,
      "gridPos": {
        "h": 8,
        "w": 12,
        "x": 12,
        "y": 39
      },
      "hiddenSeries": false,
      "id": 12,
      "legend": {
        "avg": false,
        "current": false,
        "max": false,
        "min": false,
        "show": true,
        "total": false,
        "values": false
      },
      "lines": true,
      "linewidth": 0,
      "nullPointMode": "null",
      "options": {
        "dataLinks": []
      },
      "percentage": false,
      "pointradius": 2,
      "points": false,
      "renderer": "flot",
      "seriesOverrides": [],
      "spaceLength": 10,
      "stack": true,
      "steppedLine": false,
      "targets": [
        {
          "format": "time_series",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT\n    date_bin(($__interval_ms * 50 || ' milliseconds')::interval,\n             tests.start_time,\n             TO_TIMESTAMP($__from / 1000)) AS time,\n    COALESCE(tests.status::text, 'UNKNOWN') AS metric,\n    COUNT(tests.id) AS tests\nFROM tests\nINNER JOIN builds ON builds.id = tests.build_id\nWHERE\n    tests.start_time BETWEEN TO_TIMESTAMP($__from / 1000) AND TO_TIMESTAMP($__to / 1000) AND\n    NOT tests.waived AND\n    ($origin = '%' or tests.origin LIKE $origin) AND\n    ($build_architecture = '%' OR builds.architecture LIKE $build_architecture) AND\n    ($build_config_name = '%' OR builds.config_name LIKE $build_config_name)\nGROUP BY\n    time, metric\nORDER BY\n    time",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "duration"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "tests",
          "timeColumn": "_timestamp",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "thresholds": [],
      "timeFrom": null,
      "timeRegions": [],
      "timeShift": null,
      "title": "Test status",
      "tooltip": {
        "shared": true,
        "sort": 0,
        "value_type": "individual"
      },
      "type": "graph",
      "xaxis": {
        "buckets": null,
        "mode": "time",
        "name": null,
        "show": true,
        "values": []
      },
      "yaxes": [
        {
          "format": "short",
          "label": null,
          "logBase": 1,
          "max": null,
          "min": null,
          "show": true
        },
        {
          "format": "short",
          "label": null,
          "logBase": 1,
          "max": null,
          "min": null,
          "show": true
        }
      ],
      "yaxis": {
        "align": false,
        "alignLevel": null
      }
    },
    {
      "aliasColors": {},
      "bars": false,
      "dashLength": 10,
      "dashes": false,
      "datasource": "$datasource",
      "fill": 0,
      "fillGradient": 0,
      "gridPos": {
        "h": 7,
        "w": 12,
        "x": 0,
        "y": 47
      },
      "hiddenSeries": false,
      "id": 4,
      "legend": {
        "avg": false,
        "current": false,
        "max": false,
        "min": false,
        "show": true,
        "total": false,
        "values": false
      },
      "lines": true,
      "linewidth": 2,
      "nullPointMode": "null",
      "options": {
        "dataLinks": []
      },
      "percentage": false,
      "pointradius": 2,
      "points": false,
      "renderer": "flot",
      "seriesOverrides": [],
      "spaceLength": 10,
      "stack": false,
      "steppedLine": false,
      "targets": [
        {
          "format": "time_series",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT\n    COALESCE(checkouts.time, builds.time, tests.time) AS time,\n    COALESCE(checkouts.count, 0) AS Checkouts,\n    COALESCE(builds.count, 0) AS Builds,\n    COALESCE(tests.count, 0) AS Tests\nFROM (\n    SELECT\n        date_bin(($__interval_ms * 50 || ' milliseconds')::interval,\n                 start_time, TO_TIMESTAMP($__from / 1000)) AS time,\n        COUNT(id) AS count\n    FROM\n        checkouts\n    WHERE\n        ($origin = '%' or origin LIKE $origin) AND\n        start_time BETWEEN TO_TIMESTAMP($__from / 1000) AND TO_TIMESTAMP($__to / 1000)\n    GROUP BY\n        time\n) AS checkouts\nFULL OUTER JOIN (\n    SELECT\n        date_bin(($__interval_ms * 50 || ' milliseconds')::interval,\n                 start_time, TO_TIMESTAMP($__from / 1000)) AS time,\n        COUNT(id) AS count\n    FROM builds\n    WHERE\n        ($origin = '%' or origin LIKE $origin) AND\n    \tstart_time BETWEEN TO_TIMESTAMP($__from / 1000) AND TO_TIMESTAMP($__to / 1000) AND\n        ($build_architecture = '%' OR builds.architecture LIKE $build_architecture) AND\n        ($build_config_name = '%' OR builds.config_name LIKE $build_config_name)\n    GROUP BY\n        time\n) AS builds ON builds.time = checkouts.time\nFULL OUTER JOIN (\n    SELECT\n        date_bin(($__interval_ms * 50 || ' milliseconds')::interval,\n                 start_time, TO_TIMESTAMP($__from / 1000)) AS time,\n        COUNT(id) AS count\n    FROM tests\n    WHERE\n        ($origin = '%' or origin LIKE $origin) AND\n    \tstart_time BETWEEN TO_TIMESTAMP($__from / 1000) AND TO_TIMESTAMP($__to / 1000)\n    GROUP BY\n        time\n) AS tests ON tests.time = COALESCE(checkouts.time, builds.time)\nORDER BY\n    time",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "duration"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "tests",
          "timeColumn": "_timestamp",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "thresholds": [],
      "timeFrom": null,
      "timeRegions": [],
      "timeShift": null,
      "title": "Reports",
      "tooltip": {
        "shared": true,
        "sort": 0,
        "value_type": "individual"
      },
      "type": "graph",
      "xaxis": {
        "buckets": null,
        "mode": "time",
        "name": null,
        "show": true,
        "values": []
      },
      "yaxes": [
        {
          "format": "short",
          "label": null,
          "logBase": 10,
          "max": null,
          "min": null,
          "show": true
        },
        {
          "format": "short",
          "label": null,
          "logBase": 1,
          "max": null,
          "min": null,
          "show": true
        }
      ],
      "yaxis": {
        "align": false,
        "alignLevel": null
      }
    },
    {
      "aliasColors": {},
      "bars": false,
      "dashLength": 10,
      "dashes": false,
      "datasource": "$datasource",
      "fill": 8,
      "fillGradient": 0,
      "gridPos": {
        "h": 7,
        "w": 12,
        "x": 12,
        "y": 47
      },
      "hiddenSeries": false,
      "id": 5,
      "legend": {
        "avg": false,
        "current": false,
        "max": false,
        "min": false,
        "show": true,
        "total": false,
        "values": false
      },
      "lines": true,
      "linewidth": 0,
      "nullPointMode": "null",
      "options": {
        "dataLinks": []
      },
      "percentage": false,
      "pointradius": 2,
      "points": false,
      "renderer": "flot",
      "seriesOverrides": [],
      "spaceLength": 10,
      "stack": true,
      "steppedLine": false,
      "targets": [
        {
          "format": "time_series",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT\n    date_bin(($__interval_ms * 50 || ' milliseconds')::interval,\n             builds.start_time,\n             TO_TIMESTAMP($__from / 1000)) AS time,\n    COALESCE(builds.architecture, 'UNKNOWN') AS metric,\n    COUNT(builds.id) AS Builds\nFROM\n    builds\nWHERE\n    builds.start_time BETWEEN TO_TIMESTAMP($__from / 1000) AND TO_TIMESTAMP($__to / 1000) AND\n    ($origin = '%' or builds.origin LIKE $origin) AND\n    ($build_architecture = '%' OR builds.architecture LIKE $build_architecture) AND\n    ($build_config_name = '%' OR builds.config_name LIKE $build_config_name)\nGROUP BY\n    time, metric\nORDER BY\n    time",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "duration"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "tests",
          "timeColumn": "_timestamp",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "thresholds": [],
      "timeFrom": null,
      "timeRegions": [],
      "timeShift": null,
      "title": "Builds per architecture",
      "tooltip": {
        "shared": true,
        "sort": 0,
        "value_type": "individual"
      },
      "type": "graph",
      "xaxis": {
        "buckets": null,
        "mode": "time",
        "name": null,
        "show": true,
        "values": []
      },
      "yaxes": [
        {
          "format": "short",
          "label": null,
          "logBase": 1,
          "max": null,
          "min": null,
          "show": true
        },
        {
          "format": "short",
          "label": null,
          "logBase": 1,
          "max": null,
          "min": null,
          "show": true
        }
      ],
      "yaxis": {
        "align": false,
        "alignLevel": null
      }
    }
  ],
  "refresh": "30m",
  "schemaVersion": 22,
  "style": "dark",
  "tags": [],
  "templating": {
    "list": [
      {
        "current": {
          "text": "production",
          "value": "production"
        },
        "hide": 0,
        "includeAll": false,
        "label": "Database",
        "multi": false,
        "name": "datasource",
        "options": [],
        "query": "postgres",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "type": "datasource"
      },
      {
        "allValue": "'%'",
        "current": {
          "selected": false,
          "text": "All",
          "value": "$__all"
        },
        "datasource": "$datasource",
        "definition": "SELECT DISTINCT origin FROM checkouts",
        "hide": 0,
        "includeAll": true,
        "label": "Origin",
        "multi": false,
        "name": "origin",
        "options": [],
        "query": "SELECT DISTINCT origin FROM checkouts",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 1,
        "tagValuesQuery": "",
        "tags": [],
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      },
      {
        "allValue": "'%'",
        "current": {
          "selected": false,
          "text": "All",
          "value": "$__all"
        },
        "datasource": "$datasource",
        "definition": "SELECT DISTINCT architecture FROM builds",
        "hide": 0,
        "includeAll": true,
        "label": "Build architecture",
        "multi": false,
        "name": "build_architecture",
        "options": [],
        "query": "SELECT DISTINCT architecture FROM builds",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 1,
        "tagValuesQuery": "",
        "tags": [],
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      },
      {
        "allValue": "'%'",
        "current": {
          "selected": false,
          "text": "All",
          "value": "$__all"
        },
        "datasource": "$datasource",
        "definition": "SELECT DISTINCT config_name FROM builds",
        "hide": 0,
        "includeAll": true,
        "label": "Build configuration",
        "multi": false,
        "name": "build_config_name",
        "options": [],
        "query": "SELECT DISTINCT config_name FROM builds",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 1,
        "tagValuesQuery": "",
        "tags": [],
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      }
    ]
  },
  "time": {
    "from": "now-7d",
    "to": "now"
  },
  "timepicker": {
    "refresh_intervals": [
      "5s",
      "10s",
      "30s",
      "1m",
      "5m",
      "15m",
      "30m",
      "1h",
      "2h",
      "1d"
    ]
  },
  "timezone": "",
  "title": "Home",
  "uid": "home",
  "version": 6
}
